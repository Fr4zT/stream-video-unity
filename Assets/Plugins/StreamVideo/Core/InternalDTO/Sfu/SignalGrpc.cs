// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/signal.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Stream.Video.v1.Sfu.Signal {
  internal static partial class SignalServer
  {
    static readonly string __ServiceName = "stream.video.sfu.signal.SignalServer";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.SetPublisherRequest> __Marshaller_stream_video_sfu_signal_SetPublisherRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.SetPublisherRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.SetPublisherResponse> __Marshaller_stream_video_sfu_signal_SetPublisherResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.SetPublisherResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.SendAnswerRequest> __Marshaller_stream_video_sfu_signal_SendAnswerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.SendAnswerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.SendAnswerResponse> __Marshaller_stream_video_sfu_signal_SendAnswerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.SendAnswerResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Models.ICETrickle> __Marshaller_stream_video_sfu_models_ICETrickle = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Models.ICETrickle.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.ICETrickleResponse> __Marshaller_stream_video_sfu_signal_ICETrickleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.ICETrickleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsRequest> __Marshaller_stream_video_sfu_signal_UpdateSubscriptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsResponse> __Marshaller_stream_video_sfu_signal_UpdateSubscriptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesRequest> __Marshaller_stream_video_sfu_signal_UpdateMuteStatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesResponse> __Marshaller_stream_video_sfu_signal_UpdateMuteStatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.ICERestartRequest> __Marshaller_stream_video_sfu_signal_ICERestartRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.ICERestartRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Stream.Video.v1.Sfu.Signal.ICERestartResponse> __Marshaller_stream_video_sfu_signal_ICERestartResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Stream.Video.v1.Sfu.Signal.ICERestartResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Stream.Video.v1.Sfu.Signal.SetPublisherRequest, global::Stream.Video.v1.Sfu.Signal.SetPublisherResponse> __Method_SetPublisher = new grpc::Method<global::Stream.Video.v1.Sfu.Signal.SetPublisherRequest, global::Stream.Video.v1.Sfu.Signal.SetPublisherResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPublisher",
        __Marshaller_stream_video_sfu_signal_SetPublisherRequest,
        __Marshaller_stream_video_sfu_signal_SetPublisherResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Stream.Video.v1.Sfu.Signal.SendAnswerRequest, global::Stream.Video.v1.Sfu.Signal.SendAnswerResponse> __Method_SendAnswer = new grpc::Method<global::Stream.Video.v1.Sfu.Signal.SendAnswerRequest, global::Stream.Video.v1.Sfu.Signal.SendAnswerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendAnswer",
        __Marshaller_stream_video_sfu_signal_SendAnswerRequest,
        __Marshaller_stream_video_sfu_signal_SendAnswerResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Stream.Video.v1.Sfu.Models.ICETrickle, global::Stream.Video.v1.Sfu.Signal.ICETrickleResponse> __Method_IceTrickle = new grpc::Method<global::Stream.Video.v1.Sfu.Models.ICETrickle, global::Stream.Video.v1.Sfu.Signal.ICETrickleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IceTrickle",
        __Marshaller_stream_video_sfu_models_ICETrickle,
        __Marshaller_stream_video_sfu_signal_ICETrickleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsRequest, global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsResponse> __Method_UpdateSubscriptions = new grpc::Method<global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsRequest, global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSubscriptions",
        __Marshaller_stream_video_sfu_signal_UpdateSubscriptionsRequest,
        __Marshaller_stream_video_sfu_signal_UpdateSubscriptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesRequest, global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesResponse> __Method_UpdateMuteStates = new grpc::Method<global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesRequest, global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMuteStates",
        __Marshaller_stream_video_sfu_signal_UpdateMuteStatesRequest,
        __Marshaller_stream_video_sfu_signal_UpdateMuteStatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Stream.Video.v1.Sfu.Signal.ICERestartRequest, global::Stream.Video.v1.Sfu.Signal.ICERestartResponse> __Method_IceRestart = new grpc::Method<global::Stream.Video.v1.Sfu.Signal.ICERestartRequest, global::Stream.Video.v1.Sfu.Signal.ICERestartResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IceRestart",
        __Marshaller_stream_video_sfu_signal_ICERestartRequest,
        __Marshaller_stream_video_sfu_signal_ICERestartResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Stream.Video.v1.Sfu.Signal.SignalReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for SignalServer</summary>
    public partial class SignalServerClient : grpc::ClientBase<SignalServerClient>
    {
      /// <summary>Creates a new client for SignalServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SignalServerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SignalServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SignalServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SignalServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SignalServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// SetPublisher sends the WebRTC offer for the peer connection used to publish A/V
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.SetPublisherResponse SetPublisher(global::Stream.Video.v1.Sfu.Signal.SetPublisherRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPublisher(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPublisher sends the WebRTC offer for the peer connection used to publish A/V
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.SetPublisherResponse SetPublisher(global::Stream.Video.v1.Sfu.Signal.SetPublisherRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPublisher, null, options, request);
      }
      /// <summary>
      /// SetPublisher sends the WebRTC offer for the peer connection used to publish A/V
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.SetPublisherResponse> SetPublisherAsync(global::Stream.Video.v1.Sfu.Signal.SetPublisherRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPublisherAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPublisher sends the WebRTC offer for the peer connection used to publish A/V
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.SetPublisherResponse> SetPublisherAsync(global::Stream.Video.v1.Sfu.Signal.SetPublisherRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPublisher, null, options, request);
      }
      /// <summary>
      /// answer is sent by the client to the SFU after receiving a subscriber_offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.SendAnswerResponse SendAnswer(global::Stream.Video.v1.Sfu.Signal.SendAnswerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAnswer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// answer is sent by the client to the SFU after receiving a subscriber_offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.SendAnswerResponse SendAnswer(global::Stream.Video.v1.Sfu.Signal.SendAnswerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendAnswer, null, options, request);
      }
      /// <summary>
      /// answer is sent by the client to the SFU after receiving a subscriber_offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.SendAnswerResponse> SendAnswerAsync(global::Stream.Video.v1.Sfu.Signal.SendAnswerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendAnswerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// answer is sent by the client to the SFU after receiving a subscriber_offer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.SendAnswerResponse> SendAnswerAsync(global::Stream.Video.v1.Sfu.Signal.SendAnswerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendAnswer, null, options, request);
      }
      /// <summary>
      /// SendICECandidate sends an ICE candidate to the client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.ICETrickleResponse IceTrickle(global::Stream.Video.v1.Sfu.Models.ICETrickle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IceTrickle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SendICECandidate sends an ICE candidate to the client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.ICETrickleResponse IceTrickle(global::Stream.Video.v1.Sfu.Models.ICETrickle request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IceTrickle, null, options, request);
      }
      /// <summary>
      /// SendICECandidate sends an ICE candidate to the client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.ICETrickleResponse> IceTrickleAsync(global::Stream.Video.v1.Sfu.Models.ICETrickle request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IceTrickleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SendICECandidate sends an ICE candidate to the client
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.ICETrickleResponse> IceTrickleAsync(global::Stream.Video.v1.Sfu.Models.ICETrickle request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IceTrickle, null, options, request);
      }
      /// <summary>
      /// UpdateSubscribers is used to notify the SFU about the list of video subscriptions
      /// TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsResponse UpdateSubscriptions(global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateSubscribers is used to notify the SFU about the list of video subscriptions
      /// TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsResponse UpdateSubscriptions(global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSubscriptions, null, options, request);
      }
      /// <summary>
      /// UpdateSubscribers is used to notify the SFU about the list of video subscriptions
      /// TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsResponse> UpdateSubscriptionsAsync(global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateSubscribers is used to notify the SFU about the list of video subscriptions
      /// TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsResponse> UpdateSubscriptionsAsync(global::Stream.Video.v1.Sfu.Signal.UpdateSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSubscriptions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesResponse UpdateMuteStates(global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMuteStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesResponse UpdateMuteStates(global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMuteStates, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesResponse> UpdateMuteStatesAsync(global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMuteStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesResponse> UpdateMuteStatesAsync(global::Stream.Video.v1.Sfu.Signal.UpdateMuteStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMuteStates, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.ICERestartResponse IceRestart(global::Stream.Video.v1.Sfu.Signal.ICERestartRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IceRestart(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Stream.Video.v1.Sfu.Signal.ICERestartResponse IceRestart(global::Stream.Video.v1.Sfu.Signal.ICERestartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IceRestart, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.ICERestartResponse> IceRestartAsync(global::Stream.Video.v1.Sfu.Signal.ICERestartRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IceRestartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Stream.Video.v1.Sfu.Signal.ICERestartResponse> IceRestartAsync(global::Stream.Video.v1.Sfu.Signal.ICERestartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IceRestart, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SignalServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SignalServerClient(configuration);
      }
    }

  }
}
#endregion
