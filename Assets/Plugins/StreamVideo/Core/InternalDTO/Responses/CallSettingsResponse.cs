//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable


using StreamVideo.Core.InternalDTO.Requests;
using StreamVideo.Core.InternalDTO.Events;
using StreamVideo.Core.InternalDTO.Models;

namespace StreamVideo.Core.InternalDTO.Responses
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v10.0.0.0))")]
    internal partial class CallSettingsResponse
    {
        [Newtonsoft.Json.JsonProperty("audio", Required = Newtonsoft.Json.Required.Always)]
        public AudioSettings Audio { get; set; } = new AudioSettings();

        [Newtonsoft.Json.JsonProperty("backstage", Required = Newtonsoft.Json.Required.Always)]
        public BackstageSettings Backstage { get; set; } = new BackstageSettings();

        [Newtonsoft.Json.JsonProperty("broadcasting", Required = Newtonsoft.Json.Required.Always)]
        public BroadcastSettings Broadcasting { get; set; } = new BroadcastSettings();

        [Newtonsoft.Json.JsonProperty("geofencing", Required = Newtonsoft.Json.Required.Always)]
        public GeofenceSettings Geofencing { get; set; } = new GeofenceSettings();

        [Newtonsoft.Json.JsonProperty("recording", Required = Newtonsoft.Json.Required.Always)]
        public RecordSettings Recording { get; set; } = new RecordSettings();

        [Newtonsoft.Json.JsonProperty("ring", Required = Newtonsoft.Json.Required.Always)]
        public RingSettings Ring { get; set; } = new RingSettings();

        [Newtonsoft.Json.JsonProperty("screensharing", Required = Newtonsoft.Json.Required.Always)]
        public ScreensharingSettings Screensharing { get; set; } = new ScreensharingSettings();

        [Newtonsoft.Json.JsonProperty("transcription", Required = Newtonsoft.Json.Required.Always)]
        public TranscriptionSettings Transcription { get; set; } = new TranscriptionSettings();

        [Newtonsoft.Json.JsonProperty("video", Required = Newtonsoft.Json.Required.Always)]
        public VideoSettings Video { get; set; } = new VideoSettings();

    }

}

